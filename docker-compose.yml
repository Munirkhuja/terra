services:
  laravel-backend:
    build: ./backend-laravel
    container_name: laravel-backend
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgis-db
      DB_PORT: 5432
      DB_DATABASE: terra
      DB_USERNAME: terra
      DB_PASSWORD: terra
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUMER_GROUP: ml-worker-group
      KAFKA_INPUT_TOPIC: images.tasks
      KAFKA_OUTPUT_TOPIC: images.results
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_BUCKET: uploads
      AWS_ENDPOINT: http://minio:9093
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BROADCAST_DRIVER: pusher
      PUSHER_APP_ID: local
      PUSHER_APP_KEY: local
      PUSHER_APP_SECRET: local
      PUSHER_HOST: 127.0.0.1
      PUSHER_PORT: 6001
      PUSHER_SCHEME: http
      PUSHER_APP_CLUSTER: mt1
    volumes:
      - ./backend-laravel:/var/www/html
    depends_on:
      - postgis-db
      - kafka
      - python-ml
      - minio
      - redis
      - soketi
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "8000:80"
    volumes:
      - ./backend-laravel:/var/www/html
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - laravel-backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    restart: unless-stopped
  soketi:
    image: quay.io/soketi/soketi:latest
    container_name: soketi
    ports:
      - "6001:6001"
      - "6002:6002"
    environment:
      APP_ID: local
      APP_KEY: local
      APP_SECRET: local
      PORT: 6001
      HTTP_PORT: 6002
      LOG_LEVEL: info
      CLUSTER: mt1
    restart: unless-stopped
  python-ml:
    build: ./python-ml
    container_name: python-ml
    working_dir: /app
    command: python main.py
    volumes:
      - ./python-ml:/app
      - ./python-ml/models:/app/models
    environment:
      MODEL_PATH: /app/models/yolov8n.pt
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUMER_GROUP: ml-worker-group
      KAFKA_INPUT_TOPIC: images.tasks
      KAFKA_OUTPUT_TOPIC: images.results
      MINIO_URL: http://minio:9093
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_BUCKET: uploads
    depends_on:
      - kafka
      - minio
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
    restart: unless-stopped

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minio} ${MINIO_ROOT_PASSWORD:-minio123} || true;
      until mc ls myminio >/dev/null 2>&1; do
        echo 'Waiting for MinIO...';
        sleep 2;
      done;
      mc mb --ignore-existing myminio/uploads;
      mc anonymous set public myminio/uploads;
      echo 'Bucket created';
      "

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9093:9000" # API
      - "9091:9001" # Web UI
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server --console-address ":9001" /data
    volumes:
      - ./minio/data:/data
    restart: always

  postgis-db:
    build: ./db
    container_name: postgis-db
    environment:
      POSTGRES_USER: terra
      POSTGRES_PASSWORD: terra
      POSTGRES_DB: terra
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    restart: unless-stopped
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 256M
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:3.9.1
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.6.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.49.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    restart: unless-stopped

volumes:
  pgdata:
  minio_data:
